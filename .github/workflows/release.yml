name: Release Bot

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build Bot"]
    branches: [main-2.0]
    types: 
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v1
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
    - name: Get GH Actions runner IP address
      id: runner_ip
      uses: haythem/public-ip@v1.2
    - name: Build tfvars file
      run: cd ./terraform && printf "do_token = \"%s\"\nredash_ip_address = \"%s\"\nrunner_ip_address = \"%s\"" $DO_TOKEN $TEST_IP $GH_ACTIONS_IP > cd.auto.tfvars
      env:
        DO_TOKEN: ${{ secrets.DO_PAT }}
        TEST_IP: ${{ secrets.TEST_IP }}
        GH_ACTIONS_IP: ${{ steps.runner_ip.outputs.ipv4 }}
    - name: Run terraform
      run: cd ./terraform && terraform init && terraform plan && terraform apply -auto-approve
    - name: Save droplet IP address as env var
      id: ip
      run: cd ./terraform && echo SSH_HOST_IP=$(terraform output droplet-ip-address) | tr -d '"' >> $GITHUB_ENV
    - name: Save private database connection string as env var
      run: cd ./terraform && echo DB_CONNECTION_STRING=$(terraform output database-connection-uri) >> $GITHUB_ENV
    - name: Set up dotenv file
      run: |
        @(
          'POSTGRES_CONNECTION_STRING="${{ env.DB_CONNECTION_STRING }}"'
          'TYPEORM_URL=${{ env.DB_CONNECTION_STRING }}' -replace 'postgresql', 'postgres'
          'TYPEORM_ENTITIES="dist/src/models/**/*.js"'
          'TYPEORM_ENTITIES_DIR="dist/src/models"'
          'TYPEORM_MIGRATIONS="dist/db/migration/**/*.js"'
          'TYPEORM_MIGRATIONS_DIR="dist/db/migration"'
          'REDIS_HOST="localhost"'
          'REDIS_PORT=6379'
          'BOT_TOKEN="${{ secrets.DISCORD_BOT_TOKEN }}"'
          'NODE_ENV="production"'
        ) | Out-File .env -Encoding utf8 -Force
      shell: pwsh
    - name: Copy dotenv file
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.SSH_HOST_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        source: ".env"
        target: "/srv"
    - name: Clone, install deps, and start Winnie
      uses: appleboy/ssh-action@master
      env:
        BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        POSTGRES_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}
        GITHUB_SHA: ${{ github.sha }}
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        NODE_ENV: production
      with:
        host: ${{ env.SSH_HOST_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        envs: BOT_TOKEN,POSTGRES_CONNECTION_STRING,GITHUB_SHA,REDIS_HOST,REDIS_PORT,NODE_ENV
        port: 22
        script: |
          sudo apt-get update && sudo apt-get install git redis-server -y
          sudo curl -fsSL https://deb.nodesource.com/setup_16.x | sudo bash - && sudo apt-get install nodejs -y
          sudo npm install -g yarn
          sudo systemctl start redis
          cd /srv && mkdir -p winnie && chmod 755 winnie && cd winnie
          rm -rf Winnie_Bot && git clone https://github.com/aigeroni/Winnie_Bot
          cd Winnie_Bot && git -c "advice.detachedHead=false" checkout $GITHUB_SHA
          mv /srv/.env .
          rm .env.sample
          ./start-winnie.sh
